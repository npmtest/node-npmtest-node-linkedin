{"/home/travis/build/npmtest/node-npmtest-node-linkedin/test.js":"/* istanbul instrument in package npmtest_node_linkedin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-linkedin/lib.npmtest_node_linkedin.js":"/* istanbul instrument in package npmtest_node_linkedin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_linkedin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_linkedin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-linkedin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-linkedin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_linkedin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_linkedin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_linkedin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_linkedin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_linkedin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_linkedin.__dirname + '/lib.npmtest_node_linkedin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-linkedin/node_modules/node-linkedin/lib/main.js":"/**\n * @author  Hamza Waqas <hamzawaqas@live.com>\n * @since   1/14/14\n */\n\n(function() {\n\n    var _ = require('lodash');\n\n    var Main = function(appId, appSecret, callback, state) {\n        var _services = ['connections', 'companies', 'companies_search', 'people', 'group']\n            , Inherits = require('./inherits')\n            , self = this;\n\n        // Make some configuration;\n        this.options = {\n            api_url: \"https://api.linkedin.com/v1/\",\n            format: 'json'\n        };\n\n        this.auth = require('./auth')(Inherits, {\n            appId: appId,\n            appSecret: appSecret,\n            callback: callback,\n            state: state\n        });\n        this.init = function(accessToken, options) {\n            if (typeof accessToken === 'string') {\n                this.options.accessToken = {\n                    token: accessToken,\n                    version: 2\n                };\n            } else {\n                this.options.accessToken = accessToken;\n            }\n\n            options = options || {};\n            this.options.timeout = options.timeout;\n\n            _.forEach(_services, function(service) {\n                /**\n                 * @exports service\n                 * @type {*}\n                 */\n                module.exports[service] = require(__dirname + '/services/' + service)(Inherits, self.options);\n            });\n            return module.exports;\n        };\n\n        /**\n         *  Set Callback\n         *\n         *  @param {String} 'url' to be set\n         *\n         **/\n        this.setCallback = this.auth.setCallback;\n\n        return this;\n    }.bind(this);\n\n    module.exports = Main;\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node-linkedin/node_modules/node-linkedin/lib/auth.js":"/**\n * @author  Hamza Waqas <hamzawaqas@live.com>\n * @since   1/14/14\n */\n\n(function () {\n\n    var _ = require('lodash')\n        , util = require('util')\n        , request = require('request')\n        , oauth = require('oauth')\n        , qs = require('querystring')\n        ;\n    var crypto = require('crypto');\n\n    var states = {};\n\n    function newState() {\n        var b = crypto.randomBytes(12);\n        var s = b.toString('base64');\n        var e = s.replace(/\\+/g,'-').replace(/\\//g,'_').replace(/=/g,'');\n        return e;\n    }\n\n    var Auth = function (Inherits, args) {\n        Inherits(this);\n\n        this.options = {};\n\n        this.authorize = function (res, scope, state, redirectURI) {\n\n            if (res && res.constructor === Array) {\n                redirectURI = state;\n                state = scope;\n                scope = res;\n                res = null;\n            }\n\n            state = state || newState();\n            redirectURI = redirectURI || args.callback;\n            states[state] = {\n                redirectURI: redirectURI,\n            };\n            state = encodeURIComponent(state);\n\n            var url = util.format(\"https://www.linkedin.com/uas/oauth2/authorization?response_type=code\" +\n                \"&client_id=%s\" +\n                \"&state=%s\" +\n                \"&redirect_uri=%s\",\n                args.appId,\n                state,\n                encodeURIComponent(redirectURI)\n            );\n\n            if (scope && scope.length > 0) {\n                url += '&scope=' + scope.join('%20');\n            }\n\n            return res ? res.redirect(url) : url;\n        };\n\n        this.getAccessToken = function (res, code, stateOut, cb) {\n\n            if (typeof res == 'string') {\n                cb = stateOut;\n                stateOut = code;\n                code = res;\n                res = null;\n            }\n\n            var state = states[stateOut];\n\n            if (!state) {\n                var err = new Error('Possible CSRF attack, state parameters do not match.');\n                err.name = 'CSRF Alert';\n                return cb(err, null);\n            }\n\n            delete states[stateOut];\n\n            var url = \"https://www.linkedin.com/uas/oauth2/accessToken\",\n                form = {\n                    \"grant_type\": \"authorization_code\",\n                    \"code\": code,\n                    \"redirect_uri\": state.redirectURI,\n                    \"client_id\": args.appId,\n                    \"client_secret\": args.appSecret\n                };\n\n            request.post({url: url, form: form}, function (err, response, body) {\n\n                if (err)\n                    return cb(err, null);\n\n                var res = JSON.parse(body);\n\n                if (typeof res.error !== 'undefined') {\n                    err = new Error(res.error_description);\n                    err.name = res.error;\n                    return cb(err, null);\n                }\n\n                return cb(null, res);\n\n            })\n        };\n\n        this.exchangeAccessToken = function (token, cb) {\n            var oauthClient = new oauth.OAuth(\n                'https://api.linkedin.com/uas/oauth/requestToken',\n                'https://api.linkedin.com/uas/oauth/accessToken',\n                args.appId,\n                args.appSecret,\n                '1.0',\n                null,\n                'HMAC-SHA1'\n            );\n\n            oauthClient.get(\n                'https://api.linkedin.com/uas/oauth/accessToken?xoauth_oauth2_access_token=' + encodeURIComponent(token),\n                null,\n                null,\n                function (err, data) {\n                    if (err) {\n                        return cb(err);\n                    }\n                    else {\n                        data = qs.decode(data);\n                        return cb(null, data);\n                    }\n                }\n            );\n        };\n\n        this.setAccessToken = function (accessToken) {\n            this.options['accessToken'] = accessToken;\n        };\n\n        this.getOptions = function () {\n            return this.options;\n        }\n\n        /**\n         *  Set Callback\n         *\n         *  @param {String} 'url' to be set\n         *\n         **/\n        this.setCallback = function(cb){\n          args.callback = cb || args.callback;\n        };\n\n        return this;\n    }.bind(this);\n    module.exports = Auth;\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node-linkedin/node_modules/node-linkedin/lib/inherits.js":"/**\n * @author  Hamza Waqas <hamzawaqas@live.com>\n * @since   1/14/14\n */\n\n(function() {\n    var _ = require('lodash')\n        , request = require('request')\n        , util = require('util')\n        , url = require('url');\n\n    var Handler = function(subClass) {\n        this.createCall = function(method, path, options, callback) {\n            return function(config) {\n                if (_.isFunction(options)) {\n                    callback = options;\n                    options = {};\n                }\n\n                if (config.accessToken.version === 2) {\n                    options.oauth2_access_token = config.accessToken.token;\n                }\n                options.strict = options.strict || false;\n                options.format = config.format;\n                path = url.format({\n                    pathname: path,\n                    query: options\n                });\n\n                if (options['strict'] == true) {\n                    path = config.api_url + path;\n                } else {\n                    path = url.resolve(config.api_url, path);\n                }\n\n                var parameters = {\n                    url: path,\n                    method: method,\n                    timeout: config.timeout || 60 * 1000 /* Default to 60sec */\n                };\n                if (config.accessToken.version === 1) {\n                    parameters.headers = {\n                        oauth_token: config.accessToken.token\n                    };\n                }\n                if (options.json) parameters.json = options.json;\n\n                request(parameters, function(err, response, body) {\n                    return callback(err, typeof body === 'string' ? JSON.parse(body) : body);\n                });\n            }\n        };\n\n        _.merge(subClass, this);\n        return this;\n    }.bind(this);\n\n    module.exports = Handler;\n}).call(this);","/home/travis/build/npmtest/node-npmtest-node-linkedin/node_modules/node-linkedin/lib/services/companies.js":"/**\n * @author  Hamza Waqas <hamzawaqas@live.com>\n * @since   1/26/14\n */\n\n(function() {\n    var _ = require('lodash');\n\n    var Companies = function(Inherits, config) {\n        this.config = config;\n\n        Inherits(this);\n        var fields = [\n            'id', 'name', 'universal-name',\n            'email-domains', 'company-type',\n            'ticker', 'website-url', 'industries',\n            'status', 'logo-url', 'twitter-id',\n            'employee-count-range', 'specialties', 'locations',\n            'description', 'stock-exchange', 'founded-year',\n            'end-year', 'num-followers'\n        ];\n\n        this.company = function(id, cb) {\n            this.createCall('GET', 'companies/' +id + \":(\" + fields.join(',') + \")\", cb)(this.config);\n        };\n\n        this.company_stats = function(id, cb) {\n            this.createCall('GET', 'companies/' +id + \"/company-statistics\", cb)(this.config);\n        };\n\n        this.company_historical_follower_stats = function(id, start, end, cb) {\n            this.createCall('GET', 'companies/' +id + \"/historical-follow-statistics\", {\"time-granularity\": \"day\",\"start-timestamp\": start,\"end-timestamp\": end}, cb)(this.config);\n        };\n\n        this.followers_stats = function(id, options, cb) {\n            this.createCall('GET', 'companies/' +id + \"/historical-follow-statistics\", options, cb)(this.config);\n        };\n\n        this.company_historical_status_update_stats = function(id, start, end, cb) {\n            this.createCall('GET', 'companies/' +id + \"/historical-status-update-statistics\", {\"time-granularity\": \"day\",\"start-timestamp\": start,\"end-timestamp\": end}, cb)(this.config);\n        };\n\n        this.status_update_stats = function(id, options, cb) {\n            this.createCall('GET', 'companies/' +id + \"/historical-status-update-statistics\", options, cb)(this.config);\n        };\n\n        this.name = function(name, cb) {\n            this.createCall('GET', 'companies/universal-name=' + name.split(' ').join('-') + \":(\"+ fields.join(',') + \")\", cb)(this.config);\n        };\n\n        this.email_domain = function(domain, cb) {\n            this.createCall('GET', 'companies', {\"email-domain\": domain}, cb)(this.config);\n        };\n\n        this.multiple = function(query, cb) {\n            this.createCall('GET', 'companies::(' + query + '):(' + fields.join(',') + ')', {strict: true},cb)(this.config);\n        };\n\n        this.asAdmin = function(cb) {\n            this.createCall('GET', 'companies', {\"is-company-admin\": true}, cb)(this.config);\n        };\n\n        this.getUpdate = function (id, updateId, options, cb) {\n            if (_.isFunction(options)) {\n                cb = options;\n                options = {};\n            }\n            this.createCall('GET', 'companies/' + id + '/updates/key=' + updateId, options, cb)(this.config);\n        };\n\n        this.updates = function (id, options, cb) {\n            if (_.isFunction(options)) {\n                cb = options;\n                options = {};\n            }\n            this.createCall('GET', 'companies/' + id + '/updates', options, cb)(this.config);\n        };\n\n        this.share = function (id, options, cb) {\n            this.createCall('POST', 'https://api.linkedin.com/v1/companies/' + id + '/shares', {json: options}, cb)(this.config);\n        };\n\n        this.update = function (id, update_id, cb) {\n            this.createCall('GET', 'companies/' + id + '/updates/key=' + update_id, cb)(this.config);\n        };\n        return this;\n    }.bind(this);\n\n    module.exports = Companies;\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node-linkedin/node_modules/node-linkedin/lib/services/companies_search.js":"/**\n * @author  Gal Bracha <galbra@gmail.com>\n * @since   6/29/15\n */\n\n(function() {\n    var _ = require('lodash');\n\n    var CompaniesSearch = function(Inherits, config) {\n        this.config = config;\n\n        Inherits(this);\n        var fields = [\n            'id', 'name', 'universal-name',\n            'email-domains', 'company-type',\n            'ticker', 'website-url', 'industries',\n            'status', 'logo-url', 'twitter-id',\n            'employee-count-range', 'specialties', 'locations',\n            'description', 'stock-exchange', 'founded-year',\n            'end-year', 'num-followers'\n        ];\n\n        this.name = function(name, count, cb) {\n            this.createCall('GET', 'company-search' + \":(companies:(\"+ fields.join(',') + \"))\",{'strict': true, 'count': count, 'keywords': name}, cb)(this.config);\n        }\n        return this;\n    }.bind(this);\n\n    module.exports = CompaniesSearch;\n}).call(this);","/home/travis/build/npmtest/node-npmtest-node-linkedin/node_modules/node-linkedin/lib/services/connections.js":"/**\n * @author  Hamza Waqas <hamzawaqas@live.com>\n * @since   1/14/14\n */\n\n(function() {\n\n    var _ = require('lodash');\n\n    var Connections = function(Inherits, config) {\n        this.config = config;\n\n        Inherits(this);\n\n        this.retrieve = function(url, options, cb) {\n            if (_.isFunction(url)) {\n                cb = url;\n                options = {};\n                url = 'people/~/connections';\n            }\n            else if (_.isFunction(options)) {\n                cb = options;\n                if (_.isObject(url)) {\n                    options = url;\n                    url = 'people/~/connections';\n                } else {\n                    options = {};\n                    url = url;\n                }\n            }\n\n            if (_.isUndefined(cb))\n                throw Error('callback must be defined');\n\n            this.createCall('GET', url, options, cb)(this.config);\n        };\n\n        return this;\n    }.bind(this);\n    module.exports = Connections;\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node-linkedin/node_modules/node-linkedin/lib/services/group.js":"/**\n * @author  Hamza Waqas <hamzawaqas@live.com>\n * @since   9/8/14\n */\n\n(function() {\n    \"use strict\";\n\n    var _ = require('lodash');\n\n    var Group = function(Inherits, config) {\n\n        this.config = config;\n\n        Inherits(this);\n\n        var fields = [\n            'creation-timestamp', 'title', 'summary' ,\n            'creator:(first-name,last-name,picture-url,headline)', 'likes',\n            'attachment:(image-url,content-domain,content-url,title,summary)',\n            'relation-to-viewer'\n        ], params = {\n            start: 0,\n            count: 10,\n            order: 'recency',\n            category: 'discussion'\n        };\n\n        this.feeds = function(gid, _fields, _params, cb) {\n            if (_.isFunction(_fields)) {\n                // No Fields or Parameters passed.\n                cb = _fields;\n                _fields = fields;\n                _params = params;\n            }\n\n            if (_.isFunction(_params)) {\n                // Fields is available but not params.\n                cb = _params;\n                _params = params;\n            }\n\n            this.createCall('GET', 'groups/' + gid + '/posts:(' + _fields.join(',') +\")\", _params, cb)(this.config);\n        };\n\n        return this;\n    }.bind(this);\n\n    module.exports = Group;\n}).call(this);","/home/travis/build/npmtest/node-npmtest-node-linkedin/node_modules/node-linkedin/lib/services/people.js":"/**\n * @author  Hamza Waqas <hamzawaqas@live.com>\n * @since   2/6/14\n */\n\n(function() {\n\n    var _ = require('lodash');\n\n    var People = function(Inherits, config) {\n        this.config = config;\n\n        Inherits(this);\n\n        var short_fields = [\n            'date-of-birth',\n            'educations',\n            'languages'\n        ];\n\n        var fields = [\n            'id', 'first-name', 'last-name', 'maiden-name',\n            'formatted-name', 'headline', 'location',\n            'industry', 'current-share', 'num-connections', 'num-connections-capped',\n            'summary', 'specialties', 'positions', 'picture-url','picture-urls::(original)',\n            'email-address', 'last-modified-timestamp', 'associations', 'interests',\n            'publications', 'patents', 'languages', 'skills', 'certifications',\n            'educations', 'courses', 'volunteer', 'num-recommenders',\n            'recommendations-received', 'mfeed-rss-url', 'following', 'job-bookmarks',\n            'suggestions', 'date-of-birth', 'related-profile-views', 'honors-awards',\n            'phone-numbers', 'bound-account-types', 'im-accounts', 'main-address',\n            'twitter-accounts', 'primary-twitter-account', 'connections', 'group-memberships',\n            'network', 'public-profile-url'\n        ];\n\n        this.me = function(_fields, cb) {\n            if (_.isFunction(_fields)) {\n                cb = _fields;\n                _fields = fields;\n            }\n            this.createCall('GET', 'people/~:(' + _fields.join(',') + \")\", cb)(this.config);\n        };\n\n        this.url = function(url, _fields, cb) {\n            if (_.isFunction(_fields)) {\n                cb = _fields;\n                _fields = short_fields;\n            }\n            this.createCall('GET', 'people/url=' + encodeURIComponent(url) + \":(\"+ _fields.join(',') +\")\", cb)(this.config);\n        };\n\n        this.id = function(id, _fields, cb) {\n            if (_.isFunction(_fields)) {\n                cb = _fields;\n                _fields = short_fields;\n            }\n            this.createCall('GET', 'people/id=' + id + \":(\"+ _fields.join(',') +\")\", cb)(this.config);\n        };\n\n        this.search = function(options, cb) {\n            this.createCall('GET', 'people-search', options, cb)(this.config);\n        };\n\n        this.invite = function(options, cb) {\n            this.createCall('POST', 'people/~/mailbox', {json: options}, cb)(this.config);\n        };\n\n        this.share = function(options, cb){\n          this.createCall('POST','https://api.linkedin.com/v1/people/~/shares', {json: options}, cb)(this.config);\n        }\n\n        return this;\n    }.bind(this);\n\n    module.exports = People;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node-linkedin/node_modules/node-linkedin/specs/services/companies_search_spec.js":"/**\n * @author  Gal Bracha <galbra@gmail.com>\n * @since   6/29/15\n */\n\nvar linkedin = require('../../')('75gyccfxufrozz', 'HKwSAPg0z7oGYfh5')\n    token = process.env.IN_TOKEN;\n\njasmine.getEnv().defaultTimeoutInterval = 20000;\n\nlinkedin = linkedin.init(token);\n\ndescribe('API: Companies Search Test Suite', function() {\n\n    it('should get company by given name', function(done) {\n        linkedin.companies_search.name('facebook', 1, function(err, company) {\n            expect(err).toBe(null);\n            expect(company.errorCode).toBeUndefined();\n            expect(company).not.toBe(null);\n            expect(typeof company).toBe('object');\n            expect(company.companies.values[0]name).toBe('Facebook');\n            done();\n        });\n    });\n\n});\n","/home/travis/build/npmtest/node-npmtest-node-linkedin/node_modules/node-linkedin/specs/services/companies_spec.js":"/**\n * @author  Hamza Waqas <hamzawaqas@live.com>\n * @since   1/26/14\n */\n\nvar linkedin = require('../../')('75gyccfxufrozz', 'HKwSAPg0z7oGYfh5')\n    token = process.env.IN_TOKEN;\n\njasmine.getEnv().defaultTimeoutInterval = 20000;\n\nlinkedin = linkedin.init(token);\n\ndescribe('API: Companies Test Suite', function() {\n\n    it('should get company by the given id', function(done) {\n        linkedin.companies.company('162479', function(err, company) {\n            expect(err).toBe(null);\n            expect(company).not.toBe(null);\n            expect(typeof company).toBe('object');\n            done();\n        });\n    });\n\n    it('should get the statistics for a company by the given id', function(done) {\n        linkedin.companies.company_stats('162479', function(err, company) {\n            expect(err).toBe(null);\n            expect(company).not.toBe(null);\n            expect(typeof company).toBe('object');\n            done();\n        });\n    });\n\n    it('should get the historical follower count for a company by the given id', function(done) {\n        linkedin.companies.company_historical_follower_stats('162479', 1418117379000, 1449665843000, function(err, company) {\n            expect(err).toBe(null);\n            expect(company).not.toBe(null);\n            expect(typeof company).toBe('object');\n            done();\n        });\n    });\n\n    it('should get the historical impressions count for a company by the given id', function(done) {\n        linkedin.companies.company_historical_status_update_stats('162479', 1418117379000, 1449665843000, function(err, company) {\n            expect(err).toBe(null);\n            expect(company).not.toBe(null);\n            expect(typeof company).toBe('object');\n            done();\n        });\n    });\n\n    it('should get company by universal name', function(done) {\n        linkedin.companies.name('facebook', function(err, company) {\n            expect(err).toBe(null);\n            expect(company.errorCode).toBeUndefined();\n            expect(company).not.toBe(null);\n            expect(typeof company).toBe('object');\n            expect(company.name).toBe('Facebook');\n            done();\n        });\n    });\n\n    it('should get company by email domain', function(done) {\n        linkedin.companies.email_domain('apple.com', function(err, company) {\n            expect(err).toBe(null);\n            expect(company).not.toBe(null);\n            expect(typeof company).toBe('object');\n            expect(company._total).toBeGreaterThan(0);\n            done();\n        });\n    });\n\n    it('should get multiple companies by single defined criteria', function(done) {\n        linkedin.companies.multiple('162479,universal-name=linkedinin', function(err, companies) {\n            expect(err).toBe(null);\n            expect(companies).not.toBe(null);\n            expect(typeof companies).toBe('object');\n            expect(companies._total).toBeGreaterThan(0);\n            done();\n        });\n    });\n\n    it('should get all the companies of authenticated user', function(done) {\n        linkedin.companies.asAdmin(function(err, companies) {\n            expect(err).toBe(null);\n            expect(companies).not.toBe(null);\n            expect(typeof companies).toBe('object');\n            done();\n        });\n    });\n\n    it('should get recent company updates by company id', function (done) {\n        linkedin.companies.updates(1337, function (err, updates) {\n          expect(err).toBe(null);\n          expect(updates).not.toBe(null);\n          expect(typeof updates).toBe('object');\n          done();\n        });\n    });\n\n    it('should get recent company updates by company id', function (done) {\n        linkedin.companies.getUpdate(1337, 'UPDATE-c1337-998877665544332211', function (err, updates) {\n          expect(err).toBe(null);\n          expect(updates).not.toBe(null);\n          expect(typeof updates).toBe('object');\n          done();\n        });\n    });\n    \n    it('should should share a company update by company id', function (done) {\n        linkedin.companies.share(2414183, {\n            \"comment\": \"Check out the LinkedIn Pages Share API!\",\n            \"content\": {\n                \"title\": \" LinkedIn Developers Documentation On Using the Share API \",\n                \"description\": \" Leverage the Share API to maximize engagement on user-generated content on LinkedIn\",\n                \"submitted-url\": \" https://developer.linkedin.com/docs/company-pages \",\n                \"submitted-image-url\": \" https://m3.licdn.com/media/p/3/000/124/1a6/089a29a.png\"\n            },\n            \"visibility\": { \"code\": \"anyone\" }\n          }, function (err, share) {\n          expect(err).toBe(null);\n          expect(share).not.toBe(null);\n          expect(typeof share).toBe('object');\n          done();\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-node-linkedin/node_modules/node-linkedin/specs/services/extensibility_spec.js":"var linkedin = require('../../')('75gyccfxufrozz', 'HKwSAPg0z7oGYfh5')\ntoken = process.env.IN_TOKEN;\n\njasmine.getEnv().defaultTimeoutInterval = 20000;\n\nlinkedin = linkedin.init(token);\n\ndescribe('API: People Test Suite', function() {\n\n\tit('should retrieve profile of current user', function() {\n\t\tlinkedin.people.picture = function(cb) {\n\t\t\tthis.createCall('GET', 'people/~/picture-urls::(original)', cb)(this.config);\n\t\t};\n\n\t\tlinkedin.people.picture(function(err, data) {\n\t\t\texpect(err).toBe(null);\n\t\t\tdone();\n\t\t});\n\t});\n\n});\n","/home/travis/build/npmtest/node-npmtest-node-linkedin/node_modules/node-linkedin/specs/services/group_spec.js":"/**\n * @author  Hamza Waqas <hamzawaqas@live.com>\n * @since   9/8/14\n */\n\nvar linkedin = require('../../')('75gyccfxufrozz', 'HKwSAPg0z7oGYfh5'),\n    token = process.env.IN_TOKEN;\n\njasmine.getEnv().defaultTimeoutInterval = 20000;\n\nlinkedin = linkedin.init(token);\n\ndescribe('API: Group Test Suite', function() {\n\n    it('should retrieve recent feeds from group by id', function(done) {\n        linkedin.group.feeds(3769732, function(err, data) {\n            expect(err).toBe(null);\n            expect(typeof data).toBe('object');\n            expect(data._count).toBeDefined();\n            expect(data._start).toBeDefined();\n            done();\n        });\n    });\n});","/home/travis/build/npmtest/node-npmtest-node-linkedin/node_modules/node-linkedin/specs/services/people_spec.js":"/**\n * @author  Hamza Waqas <hamzawaqas@live.com>\n * @since   2/9/14\n */\n\nvar linkedin = require('../../')('75gyccfxufrozz', 'HKwSAPg0z7oGYfh5')\ntoken = process.env.IN_TOKEN;\n\njasmine.getEnv().defaultTimeoutInterval = 20000;\n\nlinkedin = linkedin.init(token);\n\ndescribe('API: People Test Suite', function() {\n\n    it('should retrieve profile of current user', function(done) {\n        linkedin.people.me(function(err, data) {\n            done();\n        });\n    });\n\n    it('should invite someone to connect', function(done) {\n        linkedin.people.invite({\n            \"recipients\": {\n                \"values\": [{\n                    \"person\": {\n                        \"_path\": \"/people/email=glavin.wiechert@gmail.com\",\n                        \"first-name\": \"Glavin\",\n                        \"last-name\": \"Wiechert\"\n                    }\n                }]\n            },\n            \"subject\": \"Invitation to connect.\",\n            \"body\": \"Say yes!\",\n            \"item-content\": {\n                \"invitation-request\": {\n                    \"connect-type\": \"friend\"\n                }\n            }\n        }, function(err, data) {\n            done();\n        });\n    });\n\n    it('should share some data on the wall', function(done){\n        linkedin.people.share({\n                        \"comment\": \"Check out the LinkedIn Share API!\",\n                        \"content\": {\n                          \"title\": \" LinkedIn Developers Documentation On Using the Share API \",\n                          \"description\": \" Leverage the Share API to maximize engagement on user-generated content on LinkedIn\",\n                          \"submitted-url\": \" https://developer.linkedin.com/documents/share-api \",\n                          \"submitted-image-url\": \" https://m3.licdn.com/media/p/3/000/124/1a6/089a29a.png\"\n                        },\n                        \"visibility\": { \"code\": \"anyone\" }\n          }, function(err, data){\n            done();\n          });\n    });\n});\n"}